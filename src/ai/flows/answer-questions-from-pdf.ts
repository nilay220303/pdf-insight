'use server';
/**
 * @fileOverview This file defines a Genkit flow for answering questions based on the content of uploaded PDFs.
 *
 * - answerQuestionsFromPdf - A function that accepts a question and a PDF data URI, and returns an answer generated by the LLM.
 * - AnswerQuestionsFromPdfInput - The input type for the answerQuestionsFromPdf function.
 * - AnswerQuestionsFromPdfOutput - The return type for the answerQuestionsFromPdf function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnswerQuestionsFromPdfInputSchema = z.object({
  question: z.string().describe('The question to be answered.'),
  pdfDataUri: z
    .string()
    .describe(
      'The PDF document as a data URI that must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.' // Corrected typo here
    ),
  chatHistory: z.string().optional().describe('The past chat history'),
});

export type AnswerQuestionsFromPdfInput = z.infer<
  typeof AnswerQuestionsFromPdfInputSchema
>;

const AnswerQuestionsFromPdfOutputSchema = z.object({
  answer: z.string().describe('The answer to the question.'),
});

export type AnswerQuestionsFromPdfOutput = z.infer<
  typeof AnswerQuestionsFromPdfOutputSchema
>;

export async function answerQuestionsFromPdf(
  input: AnswerQuestionsFromPdfInput
): Promise<AnswerQuestionsFromPdfOutput> {
  return answerQuestionsFromPdfFlow(input);
}

const prompt = ai.definePrompt({
  name: 'answerQuestionsFromPdfPrompt',
  input: {schema: AnswerQuestionsFromPdfInputSchema},
  output: {schema: AnswerQuestionsFromPdfOutputSchema},
  prompt: `You are a chatbot that answers question based on the content of a PDF document.

      The PDF document content is provided as a media object. Use this to answer the question.
      Include the previous chat history so you don't repeat yourself.

      Previous chat history:
      {{chatHistory}}

      Question: {{{question}}}
      PDF Content: {{media url=pdfDataUri}}

      Answer:`, // Added Handlebars syntax
});

const answerQuestionsFromPdfFlow = ai.defineFlow(
  {
    name: 'answerQuestionsFromPdfFlow',
    inputSchema: AnswerQuestionsFromPdfInputSchema,
    outputSchema: AnswerQuestionsFromPdfOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
